buildscript {
    dependencies { classpath files('lib/build/clojuresque-1.4.1.jar',
                                   'lib/build/runtime-1.4.1.jar') }
}

def filemap(m) {
   return m.collect { k, v ->
     k + '=' + (v.class == String ?
                    project(':').file(v).absolutePath
                    : v)
   }
}

subprojects {

    version = "0.1.0"

    repositories {
        flatDir dirs: project(':').file('lib/compile').absoluteFile
        flatDir dirs: project(':').file('lib/runtime').absoluteFile
        flatDir dirs: project(':').file('lib/build').absoluteFile
    }
}

project(':active_papers') {

    apply plugin: "java"
    apply plugin: "clojure"

    compileClojure.dependsOn compileJava
    aotCompile = true

    dependencies {
        compile ":clojure:1.2.1"
        compile ":clojure-contrib:1.2.0"
        compile ":clj-hdf5:0.1"
        compile ":jhdf5:11.05.2"
    }

    jar {
       include "active_papers/**"
       include "active_paper_runtime/**"
    }
}

project(':active_paper_cltool') {

    apply plugin: "clojure"

    aotCompile = true
    configurations.compile.transitive = true
    uberjar.enabled = true

    dependencies {
        compile project(':active_papers')
        runtime ":swank-clojure:1.4.0-SNAPSHOT"
    }

    jar {
       include "active_papers/cltool*"
       include "active_papers/cltool/**"
    }

    uberjar {
       manifest {
          attributes('Main-Class': 'active_papers.cltool')
       }
    }
}

project(':language_support/clojure_runtime') {

    apply plugin: "java"
    apply plugin: "clojure"

    dependencies {
        compile project(':active_papers')
    }

    jar {
       include "clojure/launcher.class"
       include "active_paper_clojure_runtime/**"
    }

    task makeLibrary {
      paper = 'clojure.h5'
      libs = ['clojure': 'lib/compile/clojure-1.2.1.jar',
              'clojure-contrib': 'lib/compile/clojure-contrib-1.2.0.jar',
              'clojure-scripting': 'lib/support/clojure-jsr223.jar',
              'clojure-hdf5': 'lib/compile/clj-hdf5-0.1.jar',
              'clojure-runtime': project.jar.archivePath,
              'clojure-swank': 'lib/runtime/swank-clojure-1.4.0-SNAPSHOT.jar']

      inputs.file project.jar.archivePath
      destDir = new File(buildDir, 'active_papers')
      libFile = new File(destDir, paper)
      outputs.dir destDir
      doLast {
          destDir.mkdirs()
          javaexec {
              classpath = project(':active_paper_cltool').sourceSets.main.runtimeClasspath
              main = 'active_papers.cltool'
              args = ['make_library', libFile.absolutePath] + filemap(libs)
          }
      }
    }
    makeLibrary.dependsOn jar
    build.dependsOn makeLibrary

    task makeLibraryIncanter {
      paper = 'incanter.h5'
      libs = ['incanter': 'lib/support/incanter.jar',
              'clojure-hdf5': 'lib/compile/clj-hdf5-0.1.jar',
              'clojure-runtime': project.jar.archivePath,
              'clojure-swank': 'lib/runtime/swank-clojure-1.4.0-SNAPSHOT.jar']

      inputs.file project.jar.archivePath
      destDir = new File(buildDir, 'active_papers')
      libFile = new File(destDir, paper)
      outputs.dir destDir
      doLast {
          destDir.mkdirs()
          javaexec {
              classpath = project(':active_paper_cltool').sourceSets.main.runtimeClasspath
              main = 'active_papers.cltool'
              args = ['make_library', libFile.absolutePath] + filemap(libs)
          }
      }
    }
    makeLibraryIncanter.dependsOn jar
    build.dependsOn makeLibraryIncanter
}

project(':language_support/jython_runtime') {

    apply plugin: "java"

    jar {
        archiveName = "jython-2.5.2_with_runtime.jar"
        into('Lib') {
           from fileTree('Lib').include('**/*.py')
        }
        from zipTree(project(':').file('lib/support/jython-2.5.2.jar').absoluteFile)
    }

    task makeLibrary {
      paper = 'jython.h5'
      libs = ['jython': project.jar.archivePath]

      inputs.file project.jar.archivePath
      destDir = new File(buildDir, 'active_papers')
      libFile = new File(destDir, paper)
      outputs.dir destDir
      doLast {
          destDir.mkdirs()
          javaexec {
              classpath = project(':active_paper_cltool').sourceSets.main.runtimeClasspath
              main = 'active_papers.cltool'
              args = ['make_library', libFile.absolutePath] + filemap(libs)
          }
      }
    }
    makeLibrary.dependsOn jar
    build.dependsOn makeLibrary
}

project(':language_support/jython_plotting') {

    apply plugin: "java"

    jar {
        archiveName = "jython-plotting.jar"
        into('Lib') {
           from fileTree('Lib').include('**/*.py')
        }
    }

    task makeLibrary {
      paper = 'jython-plotting.h5'
      libs = ['jython-plotting': project.jar.archivePath,
              'jfreechart': 'lib/support/jfreechart-1.0.13.jar',
              'jcommon': 'lib/support/jcommon-1.0.16.jar']

      inputs.file project.jar.archivePath
      destDir = new File(buildDir, 'active_papers')
      libFile = new File(destDir, paper)
      outputs.dir destDir
      doLast {
          destDir.mkdirs()
          javaexec {
              classpath = project(':active_paper_cltool').sourceSets.main.runtimeClasspath
              main = 'active_papers.cltool'
              args = ['make_library', libFile.absolutePath] + filemap(libs)
          }
      }
    }
    makeLibrary.dependsOn jar
    build.dependsOn makeLibrary
}

project(':language_support/markdown_renderer') {

    apply plugin: "java"

    dependencies {
        compile project(':active_papers')
        compile files(project(':').file('lib/support/markdownj-1.0.2b4-0.3.0.jar').absoluteFile,
                      project(':').file('lib/support/cobra.jar').absoluteFile,
                      project(':').file('lib/support/js.jar').absoluteFile)
    }

    task makeLibrary {
      paper = 'markdown.h5'
      libs = ['renderer': project.jar.archivePath,
              'markdownj': 'lib/support/markdownj-1.0.2b4-0.3.0.jar',
              'cobra': 'lib/support/cobra.jar',
              'js': 'lib/support/js.jar']

      inputs.file project.jar.archivePath
      destDir = new File(buildDir, 'active_papers')
      libFile = new File(destDir, paper)
      outputs.dir destDir
      doLast {
          destDir.mkdirs()
          javaexec {
              classpath = project(':active_paper_cltool').sourceSets.main.runtimeClasspath
              main = 'active_papers.cltool'
              args = ['make_library', libFile.absolutePath] + filemap(libs)
          }
      }
    }
    makeLibrary.dependsOn jar
    build.dependsOn makeLibrary
}

// A custom task class meant to shorten all the makeLibrary tasks.
// Using it leads to an "internal error"...
class MakeLibraryTask extends DefaultTask {
    def String paper = 'active_paper.h5'
    def libs = []
    @TaskAction
    def makeLibrary() {
        inputs.file project.jar.archivePath
        destDir = new File(project.buildDir, 'active_papers')
        libFile = new File(destDir, paper)
        outputs.dir destDir
        doLast {
            destDir.mkdirs()
            javaexec {
                classpath = project(':active_paper_cltool').sourceSets.main.runtimeClasspath
                main = 'active_papers.cltool'
                args = ['make_library', libFile.absolutePath] + filemap(libs)
            }
        }
    }
}
